<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!--    Below element enables you to start annotating code to indicate that
    Spring automatically wire values into properties, methods and constructors-->
    <context:annotation-config/>

    <!--    These two attributes: default-init-method, default-destroy-method
    can be defined within the beans tag if you don't want to define init/destroy in every
    single bean-->
    <!--       default-init-method = "init"-->
    <!--       default-destroy-method = "destroy"-->

    <!--    Hello world demo -->
    <bean id = "helloWorld" class = "com.hello.HelloWorld">
        <property name = "message" value = "Hello Terence!"/>
    </bean>

    <!--    Singleton demo -->
    <bean id = "singletonBean" class = "com.hello.singletondemo.MySingleton" scope = "singleton">
    </bean>

    <!--    Prototype demo -->
    <bean id = "prototypeBean" class = "com.hello.prototypedemo.MyPrototype" scope = "prototype">
    </bean>

    <!--    Init destroy demo -->
    <bean id = "initDestroyBean" class = "com.hello.initdestroydemo.MyInitDestroy"
          init-method = "init"
          destroy-method = "destroy">
        <property name = "message" value = "Hello World!"/>
    </bean>

    <!--    Post processor demo -->
    <bean id = "postProcessBeanExample" class = "com.hello.postprocessordemo.PostProcessorBeanExample"
          init-method = "init" destroy-method = "destroy">
        <property name = "message" value = "Hello World!"/>
    </bean>

    <bean class = "com.hello.postprocessordemo.BeanPostProcessorImpl" />

    <!--    Bean inheritance demo -->

    <bean id = "parentBean" class = "com.hello.beaninheritancedemo.ParentBean"
          parent = "beanTemplate">
        <!--        <property name = "message1" value = "Hello World!"/>-->
        <!--        <property name = "message2" value = "Hello Second World!"/>-->
    </bean>

    <bean id ="childBean" class = "com.hello.beaninheritancedemo.ChildBean"
          parent = "parentBean">
        <!-- childbean message1 will override parentbean message1        -->
        <!-- childbean message2 will inherit parentbean message2        -->
        <property name = "message1" value = "Hello India!"/>
        <property name = "message3" value = "Namaste India!"/>
    </bean>

    <!--  Here is an abstract bean, not specifying the class  -->
    <bean id = "beanTemplate" abstract = "true">
        <property name = "message1" value = "Inherited from beanTemplate parent: Hello World!"/>
        <property name = "message2" value = "Inherited from beanTemplate parent: Hello Second World!"/>
    </bean>

    <!--    Injecting inner beans demo -->
    <bean id = "textEditor" class = "com.hello.injectinginnerbeansdemo.TextEditor" init-method = "init">
        <!--    setter injection    -->
        <property name = "spellChecker">
            <bean id = "spellChecker" class = "com.hello.injectinginnerbeansdemo.SpellChecker"/>
        </property>
    </bean>

    <!--    Injecting collections demo -->
    <bean id = "javaCollectionBean" class = "com.hello.injectingcollectionsdemo.JavaCollection">
        <!-- results in a setAddressList(java.util.List) call -->
        <property name = "addressList">
            <list>
                <value>INDIA</value>
                <value>Pakistan</value>
                <value>USA</value>
                <value>USA</value>
            </list>
        </property>

        <!-- results in a setAddressSet(java.util.Set) call -->
        <property name = "addressSet">
            <set>
                <value>INDIA</value>
                <value>Pakistan</value>
                <value>USA</value>
                <value>USA</value>
            </set>
        </property>

        <!-- results in a setAddressMap(java.util.Map) call -->
        <property name = "addressMap">
            <map>
                <entry key = "1" value = "INDIA"/>
                <entry key = "2" value = "Pakistan"/>
                <entry key = "3" value = "USA"/>
                <entry key = "4" value = "USA"/>
            </map>
        </property>

        <!-- results in a setAddressProp(java.util.Properties) call -->
        <property name = "addressProp">
            <props>
                <prop key = "one">INDIA</prop>
                <prop key = "one">INDIA</prop>
                <prop key = "two">Pakistan</prop>
                <prop key = "three">USA</prop>
                <prop key = "four">USA</prop>
            </props>
        </property>

        <property name = "emptyString" value="" />
        <property name = "nullProperty"><null/></property>

    </bean>

    <bean id = "javaCollectionBeanWithBeanReference" class = "com.hello.injectingcollectionsdemo.JavaCollectionWithBeanReference">

        <!-- Passing bean reference  for java.util.List -->
        <property name = "addressList">
            <list>
                <ref bean = "helloWorld"/>
                <value>Pakistan</value>
            </list>
        </property>

        <!-- Passing bean reference  for java.util.Set -->
        <property name = "addressSet">
            <set>
                <ref bean = "helloWorld"/>
                <value>Pakistan</value>
            </set>
        </property>

        <!-- Passing bean reference  for java.util.Map -->
        <property name = "addressMap">
            <map>
                <entry key = "one" value = "INDIA"/>
                <entry key = "two" value-ref = "helloWorld"/>
            </map>
        </property>
    </bean>

    <!--    Event Listener Demo    -->
    <bean id = "cStartEventHandler" class = "com.hello.eventhandlerdemo.CStartEventHandler"/>
    <bean id = "cStopEventHandler" class = "com.hello.eventhandlerdemo.CStopEventHandler"/>

    <!--    Custom Event Listener Demo    -->
    <bean id = "customEventHandler" class = "com.hello.eventhandlercustomdemo.CustomEventHandler"/>
    <bean id = "customEventPublisher" class = "com.hello.eventhandlercustomdemo.CustomEventPublisher"/>

    <!--    &lt;!&ndash; A bean definition with lazy init set on &ndash;&gt;-->
    <!--    <bean id = "..." class = "..." lazy-init = "true">-->
    <!--        &lt;!&ndash; collaborators and configuration for this bean go here &ndash;&gt;-->
    <!--    </bean>-->

    <!--    &lt;!&ndash; A bean definition with initialization method &ndash;&gt;-->
    <!--    <bean id = "..." class = "..." init-method = "...">-->
    <!--        &lt;!&ndash; collaborators and configuration for this bean go here &ndash;&gt;-->
    <!--    </bean>-->

    <!--    &lt;!&ndash; A bean definition with destruction method &ndash;&gt;-->
    <!--    <bean id = "..." class = "..." destroy-method = "...">-->
    <!--        &lt;!&ndash; collaborators and configuration for this bean go here &ndash;&gt;-->
    <!--    </bean>-->


</beans>